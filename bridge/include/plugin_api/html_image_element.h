// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#ifndef WEBF_CORE_WEBF_API_PLUGIN_API_HTML_IMAGE_ELEMENT_H_
#define WEBF_CORE_WEBF_API_PLUGIN_API_HTML_IMAGE_ELEMENT_H_
#include <stdint.h>
#include "core/native/vector_value_ref.h"
#include "rust_readable.h"
#include "html_element.h"
namespace webf {
class SharedExceptionState;
class ExecutingContext;
typedef struct NativeValue NativeValue;
typedef struct AtomicStringRef AtomicStringRef;
class HTMLImageElement;
using PublicHTMLImageElementGetAlt = NativeValue (*)(HTMLImageElement*, SharedExceptionState* shared_exception_state);
using PublicHTMLImageElementSetAlt = void (*)(HTMLImageElement*, const char*, SharedExceptionState*);
using PublicHTMLImageElementGetSrc = AtomicStringRef (*)(HTMLImageElement*);
using PublicHTMLImageElementSetSrc = void (*)(HTMLImageElement*, const char*, SharedExceptionState*);
using PublicHTMLImageElementGetSizes = NativeValue (*)(HTMLImageElement*, SharedExceptionState* shared_exception_state);
using PublicHTMLImageElementSetSizes = void (*)(HTMLImageElement*, const char*, SharedExceptionState*);
using PublicHTMLImageElementGetWidth = NativeValue (*)(HTMLImageElement*, SharedExceptionState* shared_exception_state);
using PublicHTMLImageElementSetWidth = void (*)(HTMLImageElement*, int64_t, SharedExceptionState*);
using PublicHTMLImageElementGetHeight = NativeValue (*)(HTMLImageElement*, SharedExceptionState* shared_exception_state);
using PublicHTMLImageElementSetHeight = void (*)(HTMLImageElement*, int64_t, SharedExceptionState*);
using PublicHTMLImageElementGetNaturalWidth = NativeValue (*)(HTMLImageElement*, SharedExceptionState* shared_exception_state);
using PublicHTMLImageElementGetNaturalHeight = NativeValue (*)(HTMLImageElement*, SharedExceptionState* shared_exception_state);
using PublicHTMLImageElementGetComplete = NativeValue (*)(HTMLImageElement*, SharedExceptionState* shared_exception_state);
using PublicHTMLImageElementGetCurrentSrc = NativeValue (*)(HTMLImageElement*, SharedExceptionState* shared_exception_state);
using PublicHTMLImageElementGetDecoding = NativeValue (*)(HTMLImageElement*, SharedExceptionState* shared_exception_state);
using PublicHTMLImageElementSetDecoding = void (*)(HTMLImageElement*, const char*, SharedExceptionState*);
using PublicHTMLImageElementGetFetchPriority = NativeValue (*)(HTMLImageElement*, SharedExceptionState* shared_exception_state);
using PublicHTMLImageElementSetFetchPriority = void (*)(HTMLImageElement*, const char*, SharedExceptionState*);
using PublicHTMLImageElementGetLoading = NativeValue (*)(HTMLImageElement*, SharedExceptionState* shared_exception_state);
using PublicHTMLImageElementSetLoading = void (*)(HTMLImageElement*, const char*, SharedExceptionState*);
struct HTMLImageElementPublicMethods : public WebFPublicMethods {
  static NativeValue Alt(HTMLImageElement* html_image_element, SharedExceptionState* shared_exception_state);
  static void SetAlt(HTMLImageElement* html_image_element, const char* alt, SharedExceptionState* shared_exception_state);
  static AtomicStringRef Src(HTMLImageElement* html_image_element);
  static void SetSrc(HTMLImageElement* html_image_element, const char* src, SharedExceptionState* shared_exception_state);
  static NativeValue Sizes(HTMLImageElement* html_image_element, SharedExceptionState* shared_exception_state);
  static void SetSizes(HTMLImageElement* html_image_element, const char* sizes, SharedExceptionState* shared_exception_state);
  static NativeValue Width(HTMLImageElement* html_image_element, SharedExceptionState* shared_exception_state);
  static void SetWidth(HTMLImageElement* html_image_element, int64_t width, SharedExceptionState* shared_exception_state);
  static NativeValue Height(HTMLImageElement* html_image_element, SharedExceptionState* shared_exception_state);
  static void SetHeight(HTMLImageElement* html_image_element, int64_t height, SharedExceptionState* shared_exception_state);
  static NativeValue NaturalWidth(HTMLImageElement* html_image_element, SharedExceptionState* shared_exception_state);
  static NativeValue NaturalHeight(HTMLImageElement* html_image_element, SharedExceptionState* shared_exception_state);
  static NativeValue Complete(HTMLImageElement* html_image_element, SharedExceptionState* shared_exception_state);
  static NativeValue CurrentSrc(HTMLImageElement* html_image_element, SharedExceptionState* shared_exception_state);
  static NativeValue Decoding(HTMLImageElement* html_image_element, SharedExceptionState* shared_exception_state);
  static void SetDecoding(HTMLImageElement* html_image_element, const char* decoding, SharedExceptionState* shared_exception_state);
  static NativeValue FetchPriority(HTMLImageElement* html_image_element, SharedExceptionState* shared_exception_state);
  static void SetFetchPriority(HTMLImageElement* html_image_element, const char* fetchPriority, SharedExceptionState* shared_exception_state);
  static NativeValue Loading(HTMLImageElement* html_image_element, SharedExceptionState* shared_exception_state);
  static void SetLoading(HTMLImageElement* html_image_element, const char* loading, SharedExceptionState* shared_exception_state);
  double version{1.0};
  HTMLElementPublicMethods html_element;
  PublicHTMLImageElementGetAlt html_image_element_get_alt{Alt};
  PublicHTMLImageElementSetAlt html_image_element_set_alt{SetAlt};
  PublicHTMLImageElementGetSrc html_image_element_get_src{Src};
  PublicHTMLImageElementSetSrc html_image_element_set_src{SetSrc};
  PublicHTMLImageElementGetSizes html_image_element_get_sizes{Sizes};
  PublicHTMLImageElementSetSizes html_image_element_set_sizes{SetSizes};
  PublicHTMLImageElementGetWidth html_image_element_get_width{Width};
  PublicHTMLImageElementSetWidth html_image_element_set_width{SetWidth};
  PublicHTMLImageElementGetHeight html_image_element_get_height{Height};
  PublicHTMLImageElementSetHeight html_image_element_set_height{SetHeight};
  PublicHTMLImageElementGetNaturalWidth html_image_element_get_natural_width{NaturalWidth};
  PublicHTMLImageElementGetNaturalHeight html_image_element_get_natural_height{NaturalHeight};
  PublicHTMLImageElementGetComplete html_image_element_get_complete{Complete};
  PublicHTMLImageElementGetCurrentSrc html_image_element_get_current_src{CurrentSrc};
  PublicHTMLImageElementGetDecoding html_image_element_get_decoding{Decoding};
  PublicHTMLImageElementSetDecoding html_image_element_set_decoding{SetDecoding};
  PublicHTMLImageElementGetFetchPriority html_image_element_get_fetch_priority{FetchPriority};
  PublicHTMLImageElementSetFetchPriority html_image_element_set_fetch_priority{SetFetchPriority};
  PublicHTMLImageElementGetLoading html_image_element_get_loading{Loading};
  PublicHTMLImageElementSetLoading html_image_element_set_loading{SetLoading};
};
}  // namespace webf
#endif  // WEBF_CORE_WEBF_API_PLUGIN_API_HTML_IMAGE_ELEMENT_H_
