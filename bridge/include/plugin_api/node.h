// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#ifndef WEBF_CORE_WEBF_API_PLUGIN_API_NODE_H_
#define WEBF_CORE_WEBF_API_PLUGIN_API_NODE_H_
#include <stdint.h>
#include "core/native/vector_value_ref.h"
#include "rust_readable.h"
#include "event_target.h"
namespace webf {
class NodeList;
typedef struct NodeListPublicMethods NodeListPublicMethods;
class Node;
typedef struct NodePublicMethods NodePublicMethods;
class Document;
typedef struct DocumentPublicMethods DocumentPublicMethods;
class Element;
typedef struct ElementPublicMethods ElementPublicMethods;
class SharedExceptionState;
class ExecutingContext;
typedef struct NativeValue NativeValue;
typedef struct AtomicStringRef AtomicStringRef;
class Node;
using PublicNodeGetELEMENTNODE = double (*)(Node*);
using PublicNodeGetATTRIBUTENODE = double (*)(Node*);
using PublicNodeGetTEXTNODE = double (*)(Node*);
using PublicNodeGetCOMMENTNODE = double (*)(Node*);
using PublicNodeGetDOCUMENTNODE = double (*)(Node*);
using PublicNodeGetDOCUMENTTYPENODE = double (*)(Node*);
using PublicNodeGetDOCUMENTFRAGMENTNODE = double (*)(Node*);
using PublicNodeGetNodeType = double (*)(Node*);
using PublicNodeGetNodeName = AtomicStringRef (*)(Node*);
using PublicNodeGetNodeValue = int64_t (*)(Node*);
using PublicNodeSetNodeValue = void (*)(Node*, int64_t, SharedExceptionState*);
using PublicNodeGetChildNodes = WebFValue<NodeList, NodeListPublicMethods> (*)(Node*);
using PublicNodeGetFirstChild = WebFValue<Node, NodePublicMethods> (*)(Node*);
using PublicNodeGetIsConnected = int32_t (*)(Node*);
using PublicNodeGetLastChild = WebFValue<Node, NodePublicMethods> (*)(Node*);
using PublicNodeGetNextSibling = WebFValue<Node, NodePublicMethods> (*)(Node*);
using PublicNodeGetOwnerDocument = WebFValue<Document, DocumentPublicMethods> (*)(Node*);
using PublicNodeGetParentElement = WebFValue<Element, ElementPublicMethods> (*)(Node*);
using PublicNodeGetParentNode = WebFValue<Node, NodePublicMethods> (*)(Node*);
using PublicNodeGetPreviousSibling = WebFValue<Node, NodePublicMethods> (*)(Node*);
using PublicNodeGetTextContent = int64_t (*)(Node*);
using PublicNodeSetTextContent = void (*)(Node*, int64_t, SharedExceptionState*);
using PublicNodeHasChildNodes = int32_t (*)(Node*, SharedExceptionState*);
using PublicNodeAppendChild = WebFValue<Node, NodePublicMethods> (*)(Node*, Node*, SharedExceptionState*);
using PublicNodeCloneNode = WebFValue<Node, NodePublicMethods> (*)(Node*, int32_t, SharedExceptionState*);
using PublicNodeContains = int32_t (*)(Node*, Node*, SharedExceptionState*);
using PublicNodeInsertBefore = WebFValue<Node, NodePublicMethods> (*)(Node*, Node*, Node*, SharedExceptionState*);
using PublicNodeIsEqualNode = int32_t (*)(Node*, Node*, SharedExceptionState*);
using PublicNodeIsSameNode = int32_t (*)(Node*, Node*, SharedExceptionState*);
using PublicNodeRemoveChild = WebFValue<Node, NodePublicMethods> (*)(Node*, Node*, SharedExceptionState*);
using PublicNodeRemove = void (*)(Node*, SharedExceptionState*);
using PublicNodeReplaceChild = WebFValue<Node, NodePublicMethods> (*)(Node*, Node*, Node*, SharedExceptionState*);
struct NodePublicMethods : public WebFPublicMethods {
  static double ELEMENTNODE(Node* node);
  static double ATTRIBUTENODE(Node* node);
  static double TEXTNODE(Node* node);
  static double COMMENTNODE(Node* node);
  static double DOCUMENTNODE(Node* node);
  static double DOCUMENTTYPENODE(Node* node);
  static double DOCUMENTFRAGMENTNODE(Node* node);
  static double NodeType(Node* node);
  static AtomicStringRef NodeName(Node* node);
  static int64_t NodeValue(Node* node);
  static void SetNodeValue(Node* node, int64_t nodeValue, SharedExceptionState* shared_exception_state);
  static WebFValue<NodeList, NodeListPublicMethods> ChildNodes(Node* node);
  static WebFValue<Node, NodePublicMethods> FirstChild(Node* node);
  static int32_t IsConnected(Node* node);
  static WebFValue<Node, NodePublicMethods> LastChild(Node* node);
  static WebFValue<Node, NodePublicMethods> NextSibling(Node* node);
  static WebFValue<Document, DocumentPublicMethods> OwnerDocument(Node* node);
  static WebFValue<Element, ElementPublicMethods> ParentElement(Node* node);
  static WebFValue<Node, NodePublicMethods> ParentNode(Node* node);
  static WebFValue<Node, NodePublicMethods> PreviousSibling(Node* node);
  static int64_t TextContent(Node* node);
  static void SetTextContent(Node* node, int64_t textContent, SharedExceptionState* shared_exception_state);
  static int32_t HasChildNodes(Node* node, SharedExceptionState* shared_exception_state);
  static WebFValue<Node, NodePublicMethods> AppendChild(Node* node, Node* new_node, SharedExceptionState* shared_exception_state);
  static WebFValue<Node, NodePublicMethods> CloneNode(Node* node, int32_t deep, SharedExceptionState* shared_exception_state);
  static int32_t Contains(Node* node, Node* other, SharedExceptionState* shared_exception_state);
  static WebFValue<Node, NodePublicMethods> InsertBefore(Node* node, Node* new_child, Node* ref_child, SharedExceptionState* shared_exception_state);
  static int32_t IsEqualNode(Node* node, Node* other_node, SharedExceptionState* shared_exception_state);
  static int32_t IsSameNode(Node* node, Node* other_node, SharedExceptionState* shared_exception_state);
  static WebFValue<Node, NodePublicMethods> RemoveChild(Node* node, Node* old_child, SharedExceptionState* shared_exception_state);
  static void Remove(Node* node, SharedExceptionState* shared_exception_state);
  static WebFValue<Node, NodePublicMethods> ReplaceChild(Node* node, Node* new_child, Node* old_child, SharedExceptionState* shared_exception_state);
  double version{1.0};
  EventTargetPublicMethods event_target;
  PublicNodeGetELEMENTNODE node_get_element_node{ELEMENTNODE};
  PublicNodeGetATTRIBUTENODE node_get_attribute_node{ATTRIBUTENODE};
  PublicNodeGetTEXTNODE node_get_text_node{TEXTNODE};
  PublicNodeGetCOMMENTNODE node_get_comment_node{COMMENTNODE};
  PublicNodeGetDOCUMENTNODE node_get_document_node{DOCUMENTNODE};
  PublicNodeGetDOCUMENTTYPENODE node_get_document_type_node{DOCUMENTTYPENODE};
  PublicNodeGetDOCUMENTFRAGMENTNODE node_get_document_fragment_node{DOCUMENTFRAGMENTNODE};
  PublicNodeGetNodeType node_get_node_type{NodeType};
  PublicNodeGetNodeName node_get_node_name{NodeName};
  PublicNodeGetNodeValue node_get_node_value{NodeValue};
  PublicNodeSetNodeValue node_set_node_value{SetNodeValue};
  PublicNodeGetChildNodes node_get_child_nodes{ChildNodes};
  PublicNodeGetFirstChild node_get_first_child{FirstChild};
  PublicNodeGetIsConnected node_get_is_connected{IsConnected};
  PublicNodeGetLastChild node_get_last_child{LastChild};
  PublicNodeGetNextSibling node_get_next_sibling{NextSibling};
  PublicNodeGetOwnerDocument node_get_owner_document{OwnerDocument};
  PublicNodeGetParentElement node_get_parent_element{ParentElement};
  PublicNodeGetParentNode node_get_parent_node{ParentNode};
  PublicNodeGetPreviousSibling node_get_previous_sibling{PreviousSibling};
  PublicNodeGetTextContent node_get_text_content{TextContent};
  PublicNodeSetTextContent node_set_text_content{SetTextContent};
  PublicNodeHasChildNodes node_has_child_nodes{HasChildNodes};
  PublicNodeAppendChild node_append_child{AppendChild};
  PublicNodeCloneNode node_clone_node{CloneNode};
  PublicNodeContains node_contains{Contains};
  PublicNodeInsertBefore node_insert_before{InsertBefore};
  PublicNodeIsEqualNode node_is_equal_node{IsEqualNode};
  PublicNodeIsSameNode node_is_same_node{IsSameNode};
  PublicNodeRemoveChild node_remove_child{RemoveChild};
  PublicNodeRemove node_remove{Remove};
  PublicNodeReplaceChild node_replace_child{ReplaceChild};
};
}  // namespace webf
#endif  // WEBF_CORE_WEBF_API_PLUGIN_API_NODE_H_
