// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#ifndef WEBF_CORE_WEBF_API_PLUGIN_API_KEYBOARD_EVENT_H_
#define WEBF_CORE_WEBF_API_PLUGIN_API_KEYBOARD_EVENT_H_
#include <stdint.h>
#include "core/native/vector_value_ref.h"
#include "rust_readable.h"
#include "ui_event.h"
namespace webf {
class SharedExceptionState;
class ExecutingContext;
typedef struct NativeValue NativeValue;
typedef struct AtomicStringRef AtomicStringRef;
class KeyboardEvent;
using PublicKeyboardEventGetAltKey = int32_t (*)(KeyboardEvent*);
using PublicKeyboardEventGetCharCode = double (*)(KeyboardEvent*);
using PublicKeyboardEventGetCode = AtomicStringRef (*)(KeyboardEvent*);
using PublicKeyboardEventGetCtrlKey = int32_t (*)(KeyboardEvent*);
using PublicKeyboardEventGetIsComposing = int32_t (*)(KeyboardEvent*);
using PublicKeyboardEventGetKey = AtomicStringRef (*)(KeyboardEvent*);
using PublicKeyboardEventGetKeyCode = double (*)(KeyboardEvent*);
using PublicKeyboardEventGetLocation = double (*)(KeyboardEvent*);
using PublicKeyboardEventGetMetaKey = int32_t (*)(KeyboardEvent*);
using PublicKeyboardEventGetRepeat = int32_t (*)(KeyboardEvent*);
using PublicKeyboardEventGetShiftKey = int32_t (*)(KeyboardEvent*);
using PublicKeyboardEventGetDOMKEYLOCATIONLEFT = double (*)(KeyboardEvent*);
using PublicKeyboardEventGetDOMKEYLOCATIONNUMPAD = double (*)(KeyboardEvent*);
using PublicKeyboardEventGetDOMKEYLOCATIONRIGHT = double (*)(KeyboardEvent*);
using PublicKeyboardEventGetDOMKEYLOCATIONSTANDARD = double (*)(KeyboardEvent*);
struct KeyboardEventPublicMethods : public WebFPublicMethods {
  static int32_t AltKey(KeyboardEvent* keyboard_event);
  static double CharCode(KeyboardEvent* keyboard_event);
  static AtomicStringRef Code(KeyboardEvent* keyboard_event);
  static int32_t CtrlKey(KeyboardEvent* keyboard_event);
  static int32_t IsComposing(KeyboardEvent* keyboard_event);
  static AtomicStringRef Key(KeyboardEvent* keyboard_event);
  static double KeyCode(KeyboardEvent* keyboard_event);
  static double Location(KeyboardEvent* keyboard_event);
  static int32_t MetaKey(KeyboardEvent* keyboard_event);
  static int32_t Repeat(KeyboardEvent* keyboard_event);
  static int32_t ShiftKey(KeyboardEvent* keyboard_event);
  static double DOMKEYLOCATIONLEFT(KeyboardEvent* keyboard_event);
  static double DOMKEYLOCATIONNUMPAD(KeyboardEvent* keyboard_event);
  static double DOMKEYLOCATIONRIGHT(KeyboardEvent* keyboard_event);
  static double DOMKEYLOCATIONSTANDARD(KeyboardEvent* keyboard_event);
  double version{1.0};
  UIEventPublicMethods ui_event;
  PublicKeyboardEventGetAltKey keyboard_event_get_alt_key{AltKey};
  PublicKeyboardEventGetCharCode keyboard_event_get_char_code{CharCode};
  PublicKeyboardEventGetCode keyboard_event_get_code{Code};
  PublicKeyboardEventGetCtrlKey keyboard_event_get_ctrl_key{CtrlKey};
  PublicKeyboardEventGetIsComposing keyboard_event_get_is_composing{IsComposing};
  PublicKeyboardEventGetKey keyboard_event_get_key{Key};
  PublicKeyboardEventGetKeyCode keyboard_event_get_key_code{KeyCode};
  PublicKeyboardEventGetLocation keyboard_event_get_location{Location};
  PublicKeyboardEventGetMetaKey keyboard_event_get_meta_key{MetaKey};
  PublicKeyboardEventGetRepeat keyboard_event_get_repeat{Repeat};
  PublicKeyboardEventGetShiftKey keyboard_event_get_shift_key{ShiftKey};
  PublicKeyboardEventGetDOMKEYLOCATIONLEFT keyboard_event_get_dom_key_location_left{DOMKEYLOCATIONLEFT};
  PublicKeyboardEventGetDOMKEYLOCATIONNUMPAD keyboard_event_get_dom_key_location_numpad{DOMKEYLOCATIONNUMPAD};
  PublicKeyboardEventGetDOMKEYLOCATIONRIGHT keyboard_event_get_dom_key_location_right{DOMKEYLOCATIONRIGHT};
  PublicKeyboardEventGetDOMKEYLOCATIONSTANDARD keyboard_event_get_dom_key_location_standard{DOMKEYLOCATIONSTANDARD};
};
}  // namespace webf
#endif  // WEBF_CORE_WEBF_API_PLUGIN_API_KEYBOARD_EVENT_H_
