// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#ifndef WEBF_CORE_WEBF_API_PLUGIN_API_WINDOW_H_
#define WEBF_CORE_WEBF_API_PLUGIN_API_WINDOW_H_
#include <stdint.h>
#include "core/native/vector_value_ref.h"
#include "rust_readable.h"
#include "event_target.h"
namespace webf {
class Window;
typedef struct WindowPublicMethods WindowPublicMethods;
class Screen;
typedef struct ScreenPublicMethods ScreenPublicMethods;
typedef struct WebFScrollToOptions WebFScrollToOptions;
class Element;
typedef struct ElementPublicMethods ElementPublicMethods;
class ComputedCssStyleDeclaration;
typedef struct ComputedCssStyleDeclarationPublicMethods ComputedCssStyleDeclarationPublicMethods;
class SharedExceptionState;
class ExecutingContext;
typedef struct NativeValue NativeValue;
typedef struct AtomicStringRef AtomicStringRef;
class Window;
using PublicWindowGetScreen = WebFValue<webf::Screen, ScreenPublicMethods> (*)(Window*);
using PublicWindowGetScrollX = NativeValue (*)(Window*, SharedExceptionState* shared_exception_state);
using PublicWindowGetScrollY = NativeValue (*)(Window*, SharedExceptionState* shared_exception_state);
using PublicWindowGetPageXOffset = NativeValue (*)(Window*, SharedExceptionState* shared_exception_state);
using PublicWindowGetPageYOffset = NativeValue (*)(Window*, SharedExceptionState* shared_exception_state);
using PublicWindowGetDevicePixelRatio = NativeValue (*)(Window*, SharedExceptionState* shared_exception_state);
using PublicWindowGetColorScheme = NativeValue (*)(Window*, SharedExceptionState* shared_exception_state);
using PublicWindowGetInnerWidth = NativeValue (*)(Window*, SharedExceptionState* shared_exception_state);
using PublicWindowGetInnerHeight = NativeValue (*)(Window*, SharedExceptionState* shared_exception_state);
using PublicWindowBtoa = AtomicStringRef (*)(Window*, const char*, SharedExceptionState*);
using PublicWindowAtob = AtomicStringRef (*)(Window*, const char*, SharedExceptionState*);
using PublicWindowOpen = WebFValue<webf::Window, WindowPublicMethods> (*)(Window*, const char*, SharedExceptionState*);
using PublicWindowCancelAnimationFrame = void (*)(Window*, double, SharedExceptionState*);
using PublicWindowGetComputedStyle = WebFValue<webf::ComputedCssStyleDeclaration, ComputedCssStyleDeclarationPublicMethods> (*)(Window*, Element*, const char*, SharedExceptionState*);
struct WindowPublicMethods : public WebFPublicMethods {
  static WebFValue<webf::Screen, ScreenPublicMethods> Screen(Window* window);
  static NativeValue ScrollX(Window* window, SharedExceptionState* shared_exception_state);
  static NativeValue ScrollY(Window* window, SharedExceptionState* shared_exception_state);
  static NativeValue PageXOffset(Window* window, SharedExceptionState* shared_exception_state);
  static NativeValue PageYOffset(Window* window, SharedExceptionState* shared_exception_state);
  static NativeValue DevicePixelRatio(Window* window, SharedExceptionState* shared_exception_state);
  static NativeValue ColorScheme(Window* window, SharedExceptionState* shared_exception_state);
  static NativeValue InnerWidth(Window* window, SharedExceptionState* shared_exception_state);
  static NativeValue InnerHeight(Window* window, SharedExceptionState* shared_exception_state);
  static AtomicStringRef Btoa(Window* window, const char* string, SharedExceptionState* shared_exception_state);
  static AtomicStringRef Atob(Window* window, const char* string, SharedExceptionState* shared_exception_state);
  static WebFValue<webf::Window, WindowPublicMethods> Open(Window* window, const char* url, SharedExceptionState* shared_exception_state);
  static void CancelAnimationFrame(Window* window, double request_id, SharedExceptionState* shared_exception_state);
  static WebFValue<webf::ComputedCssStyleDeclaration, ComputedCssStyleDeclarationPublicMethods> GetComputedStyle(Window* window, Element* element, const char* pseudo_elt, SharedExceptionState* shared_exception_state);
  double version{1.0};
  EventTargetPublicMethods event_target;
  PublicWindowGetScreen window_get_screen{Screen};
  PublicWindowGetScrollX window_get_scroll_x{ScrollX};
  PublicWindowGetScrollY window_get_scroll_y{ScrollY};
  PublicWindowGetPageXOffset window_get_page_x_offset{PageXOffset};
  PublicWindowGetPageYOffset window_get_page_y_offset{PageYOffset};
  PublicWindowGetDevicePixelRatio window_get_device_pixel_ratio{DevicePixelRatio};
  PublicWindowGetColorScheme window_get_color_scheme{ColorScheme};
  PublicWindowGetInnerWidth window_get_inner_width{InnerWidth};
  PublicWindowGetInnerHeight window_get_inner_height{InnerHeight};
  PublicWindowBtoa window_btoa{Btoa};
  PublicWindowAtob window_atob{Atob};
  PublicWindowOpen window_open{Open};
  PublicWindowCancelAnimationFrame window_cancel_animation_frame{CancelAnimationFrame};
  PublicWindowGetComputedStyle window_get_computed_style{GetComputedStyle};
};
}  // namespace webf
#endif  // WEBF_CORE_WEBF_API_PLUGIN_API_WINDOW_H_
