// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#ifndef WEBF_CORE_WEBF_API_PLUGIN_API_WINDOW_H_
#define WEBF_CORE_WEBF_API_PLUGIN_API_WINDOW_H_
#include <stdint.h>
#include "core/native/vector_value_ref.h"
#include "rust_readable.h"
#include "event_target.h"
namespace webf {
class Window;
typedef struct WindowPublicMethods WindowPublicMethods;
class Screen;
typedef struct ScreenPublicMethods ScreenPublicMethods;
typedef struct WebFScrollToOptions WebFScrollToOptions;
class Element;
typedef struct ElementPublicMethods ElementPublicMethods;
class ComputedCssStyleDeclaration;
typedef struct ComputedCssStyleDeclarationPublicMethods ComputedCssStyleDeclarationPublicMethods;
class SharedExceptionState;
class ExecutingContext;
typedef struct NativeValue NativeValue;
typedef struct AtomicStringRef AtomicStringRef;
class Window;
using PublicWindowGetWindow = WebFValue<Window, WindowPublicMethods> (*)(Window*);
using PublicWindowGetParent = WebFValue<Window, WindowPublicMethods> (*)(Window*);
using PublicWindowGetSelf = WebFValue<Window, WindowPublicMethods> (*)(Window*);
using PublicWindowGetScreen = WebFValue<Screen, ScreenPublicMethods> (*)(Window*);
using PublicWindowGetScrollX = double (*)(Window*);
using PublicWindowGetScrollY = double (*)(Window*);
using PublicWindowGetPageXOffset = double (*)(Window*);
using PublicWindowGetPageYOffset = double (*)(Window*);
using PublicWindowGetDevicePixelRatio = double (*)(Window*);
using PublicWindowGetColorScheme = AtomicStringRef (*)(Window*);
using PublicWindowGetInnerWidth = double (*)(Window*);
using PublicWindowGetInnerHeight = double (*)(Window*);
using PublicWindowBtoa = AtomicStringRef (*)(Window*, const char*, SharedExceptionState*);
using PublicWindowAtob = AtomicStringRef (*)(Window*, const char*, SharedExceptionState*);
using PublicWindowOpen = WebFValue<Window, WindowPublicMethods> (*)(Window*, const char*, SharedExceptionState*);
using PublicWindowScroll = void (*)(Window*, double, double, SharedExceptionState*);
using PublicWindowScroll = void (*)(Window*, WebFScrollToOptions*, SharedExceptionState*);
using PublicWindowScrollTo = void (*)(Window*, WebFScrollToOptions*, SharedExceptionState*);
using PublicWindowScrollTo = void (*)(Window*, double, double, SharedExceptionState*);
using PublicWindowScrollBy = void (*)(Window*, WebFScrollToOptions*, SharedExceptionState*);
using PublicWindowScrollBy = void (*)(Window*, double, double, SharedExceptionState*);
using PublicWindowPostMessage = void (*)(Window*, NativeValue, const char*, SharedExceptionState*);
using PublicWindowPostMessage = void (*)(Window*, NativeValue, SharedExceptionState*);
using PublicWindowRequestAnimationFrame = double (*)(Window*, int64_t, SharedExceptionState*);
using PublicWindowCancelAnimationFrame = void (*)(Window*, double, SharedExceptionState*);
using PublicWindowGetComputedStyle = WebFValue<ComputedCssStyleDeclaration, ComputedCssStyleDeclarationPublicMethods> (*)(Window*, Element*, const char*, SharedExceptionState*);
struct WindowPublicMethods : public WebFPublicMethods {
  static WebFValue<Window, WindowPublicMethods> Window(Window* window);
  static WebFValue<Window, WindowPublicMethods> Parent(Window* window);
  static WebFValue<Window, WindowPublicMethods> Self(Window* window);
  static WebFValue<Screen, ScreenPublicMethods> Screen(Window* window);
  static double ScrollX(Window* window);
  static double ScrollY(Window* window);
  static double PageXOffset(Window* window);
  static double PageYOffset(Window* window);
  static double DevicePixelRatio(Window* window);
  static AtomicStringRef ColorScheme(Window* window);
  static double InnerWidth(Window* window);
  static double InnerHeight(Window* window);
  static AtomicStringRef Btoa(Window* window, const char* string, SharedExceptionState* shared_exception_state);
  static AtomicStringRef Atob(Window* window, const char* string, SharedExceptionState* shared_exception_state);
  static WebFValue<Window, WindowPublicMethods> Open(Window* window, const char* url, SharedExceptionState* shared_exception_state);
  static void Scroll(Window* window, double x, double y, SharedExceptionState* shared_exception_state);
  static void Scroll(Window* window, WebFScrollToOptions* options, SharedExceptionState* shared_exception_state);
  static void ScrollTo(Window* window, WebFScrollToOptions* options, SharedExceptionState* shared_exception_state);
  static void ScrollTo(Window* window, double x, double y, SharedExceptionState* shared_exception_state);
  static void ScrollBy(Window* window, WebFScrollToOptions* options, SharedExceptionState* shared_exception_state);
  static void ScrollBy(Window* window, double x, double y, SharedExceptionState* shared_exception_state);
  static void PostMessage(Window* window, NativeValue message, const char* target_origin, SharedExceptionState* shared_exception_state);
  static void PostMessage(Window* window, NativeValue message, SharedExceptionState* shared_exception_state);
  static double RequestAnimationFrame(Window* window, int64_t callback, SharedExceptionState* shared_exception_state);
  static void CancelAnimationFrame(Window* window, double request_id, SharedExceptionState* shared_exception_state);
  static WebFValue<ComputedCssStyleDeclaration, ComputedCssStyleDeclarationPublicMethods> GetComputedStyle(Window* window, Element* element, const char* pseudo_elt, SharedExceptionState* shared_exception_state);
  double version{1.0};
  EventTargetPublicMethods event_target;
  PublicWindowGetWindow window_get_window{Window};
  PublicWindowGetParent window_get_parent{Parent};
  PublicWindowGetSelf window_get_self{Self};
  PublicWindowGetScreen window_get_screen{Screen};
  PublicWindowGetScrollX window_get_scroll_x{ScrollX};
  PublicWindowGetScrollY window_get_scroll_y{ScrollY};
  PublicWindowGetPageXOffset window_get_page_x_offset{PageXOffset};
  PublicWindowGetPageYOffset window_get_page_y_offset{PageYOffset};
  PublicWindowGetDevicePixelRatio window_get_device_pixel_ratio{DevicePixelRatio};
  PublicWindowGetColorScheme window_get_color_scheme{ColorScheme};
  PublicWindowGetInnerWidth window_get_inner_width{InnerWidth};
  PublicWindowGetInnerHeight window_get_inner_height{InnerHeight};
  PublicWindowBtoa window_btoa{Btoa};
  PublicWindowAtob window_atob{Atob};
  PublicWindowOpen window_open{Open};
  PublicWindowScroll window_scroll{Scroll};
  PublicWindowScroll window_scroll{Scroll};
  PublicWindowScrollTo window_scroll_to{ScrollTo};
  PublicWindowScrollTo window_scroll_to{ScrollTo};
  PublicWindowScrollBy window_scroll_by{ScrollBy};
  PublicWindowScrollBy window_scroll_by{ScrollBy};
  PublicWindowPostMessage window_post_message{PostMessage};
  PublicWindowPostMessage window_post_message{PostMessage};
  PublicWindowRequestAnimationFrame window_request_animation_frame{RequestAnimationFrame};
  PublicWindowCancelAnimationFrame window_cancel_animation_frame{CancelAnimationFrame};
  PublicWindowGetComputedStyle window_get_computed_style{GetComputedStyle};
};
}  // namespace webf
#endif  // WEBF_CORE_WEBF_API_PLUGIN_API_WINDOW_H_
