// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#ifndef WEBF_CORE_WEBF_API_PLUGIN_API_EVENT_TARGET_H_
#define WEBF_CORE_WEBF_API_PLUGIN_API_EVENT_TARGET_H_
#include <stdint.h>
#include "core/native/vector_value_ref.h"
#include "rust_readable.h"
#include "webf_value.h"
namespace webf {
typedef struct WebFEventListenerContext WebFEventListenerContext;
typedef struct WebFAddEventListenerOptions WebFAddEventListenerOptions;
typedef struct WebFEventListenerOptions WebFEventListenerOptions;
class Event;
typedef struct EventPublicMethods EventPublicMethods;
class SharedExceptionState;
class ExecutingContext;
typedef struct NativeValue NativeValue;
typedef struct AtomicStringRef AtomicStringRef;
class EventTarget;
enum class EventTargetType {
  kEventTarget = 0,
  kScreen = 1,
  kWindow = 2,
  kNode = 3,
  kCharacterData = 4,
  kComment = 5,
  kText = 6,
  kDocument = 7,
  kDocumentFragment = 8,
  kElement = 9,
  kHTMLElement = 10,
  kHTMLScriptElement = 11,
  kHTMLHeadElement = 12,
  kHTMLImageElement = 13,
  kImage = 14,
  kHTMLCanvasElement = 15,
  kHTMLHtmlElement = 16,
  kHTMLBodyElement = 17,
  kHTMLDivElement = 18,
};
using PublicEventTargetAddEventListener = void (*)(EventTarget*, const char*, WebFEventListenerContext*, WebFAddEventListenerOptions*, SharedExceptionState*);
using PublicEventTargetRemoveEventListener = void (*)(EventTarget*, const char*, WebFEventListenerContext*, WebFEventListenerOptions*, SharedExceptionState*);
using PublicEventTargetDispatchEvent = int32_t (*)(EventTarget*, Event*, SharedExceptionState*);
using PublicEventTargetRelease = void (*)(EventTarget*);
using PublicEventTargetDynamicTo = WebFValue<EventTarget, WebFPublicMethods> (*)(EventTarget*, EventTargetType);
struct EventTargetPublicMethods : public WebFPublicMethods {
  static void AddEventListener(EventTarget* event_target, const char* type, WebFEventListenerContext* callback, WebFAddEventListenerOptions* options, SharedExceptionState* shared_exception_state);
  static void RemoveEventListener(EventTarget* event_target, const char* type, WebFEventListenerContext* callback, WebFEventListenerOptions* options, SharedExceptionState* shared_exception_state);
  static int32_t DispatchEvent(EventTarget* event_target, Event* event, SharedExceptionState* shared_exception_state);
  static void Release(EventTarget* event_target);
  static WebFValue<EventTarget, WebFPublicMethods> DynamicTo(EventTarget* event_target, EventTargetType event_target_type);
  double version{1.0};
  PublicEventTargetAddEventListener event_target_add_event_listener{AddEventListener};
  PublicEventTargetRemoveEventListener event_target_remove_event_listener{RemoveEventListener};
  PublicEventTargetDispatchEvent event_target_dispatch_event{DispatchEvent};
  PublicEventTargetRelease event_target_release{Release};
  PublicEventTargetDynamicTo event_target_dynamic_to{DynamicTo};
};
}  // namespace webf
#endif  // WEBF_CORE_WEBF_API_PLUGIN_API_EVENT_TARGET_H_
