// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#ifndef WEBF_CORE_WEBF_API_PLUGIN_API_ELEMENT_H_
#define WEBF_CORE_WEBF_API_PLUGIN_API_ELEMENT_H_
#include <stdint.h>
#include "core/native/vector_value_ref.h"
#include "rust_readable.h"
#include "node.h"
namespace webf {
class DOMTokenList;
typedef struct DOMTokenListPublicMethods DOMTokenListPublicMethods;
class DOMStringMap;
typedef struct DOMStringMapPublicMethods DOMStringMapPublicMethods;
class ElementAttributes;
typedef struct ElementAttributesPublicMethods ElementAttributesPublicMethods;
class CSSStyleDeclaration;
typedef struct CSSStyleDeclarationPublicMethods CSSStyleDeclarationPublicMethods;
class Document;
typedef struct DocumentPublicMethods DocumentPublicMethods;
class BoundingClientRect;
typedef struct BoundingClientRectPublicMethods BoundingClientRectPublicMethods;
class Element;
typedef struct ElementPublicMethods ElementPublicMethods;
typedef struct WebFScrollToOptions WebFScrollToOptions;
class SharedExceptionState;
class ExecutingContext;
typedef struct NativeValue NativeValue;
typedef struct AtomicStringRef AtomicStringRef;
class Element;
using PublicElementGetId = AtomicStringRef (*)(Element*);
using PublicElementSetId = void (*)(Element*, const char*, SharedExceptionState*);
using PublicElementGetClassName = AtomicStringRef (*)(Element*);
using PublicElementSetClassName = void (*)(Element*, const char*, SharedExceptionState*);
using PublicElementGetDataset = WebFValue<DOMStringMap, DOMStringMapPublicMethods> (*)(Element*);
using PublicElementGetName = AtomicStringRef (*)(Element*, SharedExceptionState* shared_exception_state);
using PublicElementSetName = void (*)(Element*, const char*, SharedExceptionState*);
using PublicElementGetAttributes = WebFValue<ElementAttributes, ElementAttributesPublicMethods> (*)(Element*);
using PublicElementGetStyle = WebFValue<CSSStyleDeclaration, CSSStyleDeclarationPublicMethods> (*)(Element*);
using PublicElementGetClientHeight = double (*)(Element*, SharedExceptionState* shared_exception_state);
using PublicElementGetClientLeft = double (*)(Element*, SharedExceptionState* shared_exception_state);
using PublicElementGetClientTop = double (*)(Element*, SharedExceptionState* shared_exception_state);
using PublicElementGetClientWidth = double (*)(Element*, SharedExceptionState* shared_exception_state);
using PublicElementGetOuterHTML = AtomicStringRef (*)(Element*);
using PublicElementGetInnerHTML = AtomicStringRef (*)(Element*);
using PublicElementSetInnerHTML = void (*)(Element*, const char*, SharedExceptionState*);
using PublicElementGetOwnerDocument = WebFValue<Document, DocumentPublicMethods> (*)(Element*);
using PublicElementGetScrollLeft = double (*)(Element*, SharedExceptionState* shared_exception_state);
using PublicElementSetScrollLeft = void (*)(Element*, double, SharedExceptionState*);
using PublicElementGetScrollTop = double (*)(Element*, SharedExceptionState* shared_exception_state);
using PublicElementSetScrollTop = void (*)(Element*, double, SharedExceptionState*);
using PublicElementGetScrollWidth = double (*)(Element*, SharedExceptionState* shared_exception_state);
using PublicElementGetScrollHeight = double (*)(Element*, SharedExceptionState* shared_exception_state);
using PublicElementGetLocalName = AtomicStringRef (*)(Element*);
using PublicElementGetTagName = AtomicStringRef (*)(Element*);
using PublicElementGetDir = AtomicStringRef (*)(Element*, SharedExceptionState* shared_exception_state);
using PublicElementSetDir = void (*)(Element*, const char*, SharedExceptionState*);
using PublicElementSetAttribute = void (*)(Element*, const char*, const char*, SharedExceptionState*);
using PublicElementRemoveAttribute = void (*)(Element*, const char*, SharedExceptionState*);
using PublicElementHasAttribute = int32_t (*)(Element*, const char*, SharedExceptionState*);
using PublicElementGetBoundingClientRect = WebFValue<BoundingClientRect, BoundingClientRectPublicMethods> (*)(Element*, SharedExceptionState*);
using PublicElementGetClientRects = VectorValueRef (*)(Element*, SharedExceptionState*);
using PublicElementGetElementsByClassName = VectorValueRef (*)(Element*, const char*, SharedExceptionState*);
using PublicElementGetElementsByTagName = VectorValueRef (*)(Element*, const char*, SharedExceptionState*);
using PublicElementQuerySelector = WebFValue<Element, ElementPublicMethods> (*)(Element*, const char*, SharedExceptionState*);
using PublicElementQuerySelectorAll = VectorValueRef (*)(Element*, const char*, SharedExceptionState*);
using PublicElementMatches = int32_t (*)(Element*, const char*, SharedExceptionState*);
using PublicElementClosest = WebFValue<Element, ElementPublicMethods> (*)(Element*, const char*, SharedExceptionState*);
using PublicElementTestGlobalToLocal = NativeValue (*)(Element*, double, double, SharedExceptionState*);
struct ElementPublicMethods : public WebFPublicMethods {
  static AtomicStringRef Id(Element* element);
  static void SetId(Element* element, const char* id, SharedExceptionState* shared_exception_state);
  static AtomicStringRef ClassName(Element* element);
  static void SetClassName(Element* element, const char* className, SharedExceptionState* shared_exception_state);
  static WebFValue<DOMStringMap, DOMStringMapPublicMethods> Dataset(Element* element);
  static AtomicStringRef Name(Element* element, SharedExceptionState* shared_exception_state);
  static void SetName(Element* element, const char* name, SharedExceptionState* shared_exception_state);
  static WebFValue<ElementAttributes, ElementAttributesPublicMethods> Attributes(Element* element);
  static WebFValue<CSSStyleDeclaration, CSSStyleDeclarationPublicMethods> Style(Element* element);
  static double ClientHeight(Element* element, SharedExceptionState* shared_exception_state);
  static double ClientLeft(Element* element, SharedExceptionState* shared_exception_state);
  static double ClientTop(Element* element, SharedExceptionState* shared_exception_state);
  static double ClientWidth(Element* element, SharedExceptionState* shared_exception_state);
  static AtomicStringRef OuterHTML(Element* element);
  static AtomicStringRef InnerHTML(Element* element);
  static void SetInnerHTML(Element* element, const char* innerHTML, SharedExceptionState* shared_exception_state);
  static WebFValue<Document, DocumentPublicMethods> OwnerDocument(Element* element);
  static double ScrollLeft(Element* element, SharedExceptionState* shared_exception_state);
  static void SetScrollLeft(Element* element, double scrollLeft, SharedExceptionState* shared_exception_state);
  static double ScrollTop(Element* element, SharedExceptionState* shared_exception_state);
  static void SetScrollTop(Element* element, double scrollTop, SharedExceptionState* shared_exception_state);
  static double ScrollWidth(Element* element, SharedExceptionState* shared_exception_state);
  static double ScrollHeight(Element* element, SharedExceptionState* shared_exception_state);
  static AtomicStringRef LocalName(Element* element);
  static AtomicStringRef TagName(Element* element);
  static AtomicStringRef Dir(Element* element, SharedExceptionState* shared_exception_state);
  static void SetDir(Element* element, const char* dir, SharedExceptionState* shared_exception_state);
  static void SetAttribute(Element* element, const char* qualified_name, const char* value, SharedExceptionState* shared_exception_state);
  static void RemoveAttribute(Element* element, const char* qualified_name, SharedExceptionState* shared_exception_state);
  static int32_t HasAttribute(Element* element, const char* qualified_name, SharedExceptionState* shared_exception_state);
  static WebFValue<BoundingClientRect, BoundingClientRectPublicMethods> GetBoundingClientRect(Element* element, SharedExceptionState* shared_exception_state);
  static VectorValueRef GetClientRects(Element* element, SharedExceptionState* shared_exception_state);
  static VectorValueRef GetElementsByClassName(Element* element, const char* class_name, SharedExceptionState* shared_exception_state);
  static VectorValueRef GetElementsByTagName(Element* element, const char* tag_name, SharedExceptionState* shared_exception_state);
  static WebFValue<Element, ElementPublicMethods> QuerySelector(Element* element, const char* selectors, SharedExceptionState* shared_exception_state);
  static VectorValueRef QuerySelectorAll(Element* element, const char* selectors, SharedExceptionState* shared_exception_state);
  static int32_t Matches(Element* element, const char* selectors, SharedExceptionState* shared_exception_state);
  static WebFValue<Element, ElementPublicMethods> Closest(Element* element, const char* selectors, SharedExceptionState* shared_exception_state);
  static NativeValue TestGlobalToLocal(Element* element, double x, double y, SharedExceptionState* shared_exception_state);
  double version{1.0};
  NodePublicMethods node;
  PublicElementGetId element_get_id{Id};
  PublicElementSetId element_set_id{SetId};
  PublicElementGetClassName element_get_class_name{ClassName};
  PublicElementSetClassName element_set_class_name{SetClassName};
  PublicElementGetDataset element_get_dataset{Dataset};
  PublicElementGetName element_get_name{Name};
  PublicElementSetName element_set_name{SetName};
  PublicElementGetAttributes element_get_attributes{Attributes};
  PublicElementGetStyle element_get_style{Style};
  PublicElementGetClientHeight element_get_client_height{ClientHeight};
  PublicElementGetClientLeft element_get_client_left{ClientLeft};
  PublicElementGetClientTop element_get_client_top{ClientTop};
  PublicElementGetClientWidth element_get_client_width{ClientWidth};
  PublicElementGetOuterHTML element_get_outer_html{OuterHTML};
  PublicElementGetInnerHTML element_get_inner_html{InnerHTML};
  PublicElementSetInnerHTML element_set_inner_html{SetInnerHTML};
  PublicElementGetOwnerDocument element_get_owner_document{OwnerDocument};
  PublicElementGetScrollLeft element_get_scroll_left{ScrollLeft};
  PublicElementSetScrollLeft element_set_scroll_left{SetScrollLeft};
  PublicElementGetScrollTop element_get_scroll_top{ScrollTop};
  PublicElementSetScrollTop element_set_scroll_top{SetScrollTop};
  PublicElementGetScrollWidth element_get_scroll_width{ScrollWidth};
  PublicElementGetScrollHeight element_get_scroll_height{ScrollHeight};
  PublicElementGetLocalName element_get_local_name{LocalName};
  PublicElementGetTagName element_get_tag_name{TagName};
  PublicElementGetDir element_get_dir{Dir};
  PublicElementSetDir element_set_dir{SetDir};
  PublicElementSetAttribute element_set_attribute{SetAttribute};
  PublicElementRemoveAttribute element_remove_attribute{RemoveAttribute};
  PublicElementHasAttribute element_has_attribute{HasAttribute};
  PublicElementGetBoundingClientRect element_get_bounding_client_rect{GetBoundingClientRect};
  PublicElementGetClientRects element_get_client_rects{GetClientRects};
  PublicElementGetElementsByClassName element_get_elements_by_class_name{GetElementsByClassName};
  PublicElementGetElementsByTagName element_get_elements_by_tag_name{GetElementsByTagName};
  PublicElementQuerySelector element_query_selector{QuerySelector};
  PublicElementQuerySelectorAll element_query_selector_all{QuerySelectorAll};
  PublicElementMatches element_matches{Matches};
  PublicElementClosest element_closest{Closest};
  PublicElementTestGlobalToLocal element_test_global_to_local{TestGlobalToLocal};
};
}  // namespace webf
#endif  // WEBF_CORE_WEBF_API_PLUGIN_API_ELEMENT_H_
