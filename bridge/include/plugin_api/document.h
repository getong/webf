// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#ifndef WEBF_CORE_WEBF_API_PLUGIN_API_DOCUMENT_H_
#define WEBF_CORE_WEBF_API_PLUGIN_API_DOCUMENT_H_
#include <stdint.h>
#include "core/native/vector_value_ref.h"
#include "rust_readable.h"
#include "node.h"
namespace webf {
class HTMLAllCollection;
typedef struct HTMLAllCollectionPublicMethods HTMLAllCollectionPublicMethods;
class HTMLBodyElement;
typedef struct HTMLBodyElementPublicMethods HTMLBodyElementPublicMethods;
class HTMLHeadElement;
typedef struct HTMLHeadElementPublicMethods HTMLHeadElementPublicMethods;
class HTMLHtmlElement;
typedef struct HTMLHtmlElementPublicMethods HTMLHtmlElementPublicMethods;
class Window;
typedef struct WindowPublicMethods WindowPublicMethods;
class IDLEventHandler;
typedef struct IDLEventHandlerPublicMethods IDLEventHandlerPublicMethods;
class Element;
typedef struct ElementPublicMethods ElementPublicMethods;
class Text;
typedef struct TextPublicMethods TextPublicMethods;
class DocumentFragment;
typedef struct DocumentFragmentPublicMethods DocumentFragmentPublicMethods;
class Comment;
typedef struct CommentPublicMethods CommentPublicMethods;
class Event;
typedef struct EventPublicMethods EventPublicMethods;
class SharedExceptionState;
class ExecutingContext;
typedef struct NativeValue NativeValue;
typedef struct AtomicStringRef AtomicStringRef;
class Document;
using PublicDocumentGetTitle = AtomicStringRef (*)(Document*, SharedExceptionState* shared_exception_state);
using PublicDocumentSetTitle = void (*)(Document*, const char*, SharedExceptionState*);
using PublicDocumentGetBody = WebFValue<HTMLBodyElement, HTMLBodyElementPublicMethods> (*)(Document*);
using PublicDocumentSetBody = void (*)(Document*, HTMLBodyElement*, SharedExceptionState*);
using PublicDocumentGetCookie = AtomicStringRef (*)(Document*, SharedExceptionState* shared_exception_state);
using PublicDocumentSetCookie = void (*)(Document*, const char*, SharedExceptionState*);
using PublicDocumentGetDomain = AtomicStringRef (*)(Document*);
using PublicDocumentSetDomain = void (*)(Document*, const char*, SharedExceptionState*);
using PublicDocumentGetHead = WebFValue<HTMLHeadElement, HTMLHeadElementPublicMethods> (*)(Document*);
using PublicDocumentGetDocumentElement = WebFValue<HTMLHtmlElement, HTMLHtmlElementPublicMethods> (*)(Document*);
using PublicDocumentGetLocation = NativeValue (*)(Document*, SharedExceptionState* shared_exception_state);
using PublicDocumentGetCompatMode = AtomicStringRef (*)(Document*);
using PublicDocumentGetReadyState = AtomicStringRef (*)(Document*);
using PublicDocumentGetVisibilityState = AtomicStringRef (*)(Document*, SharedExceptionState* shared_exception_state);
using PublicDocumentGetHidden = int32_t (*)(Document*);
using PublicDocumentGetDefaultView = WebFValue<Window, WindowPublicMethods> (*)(Document*);
using PublicDocumentClearCookies = void (*)(Document*, SharedExceptionState*);
using PublicDocumentCreateElement = WebFValue<Element, ElementPublicMethods> (*)(Document*, const char*, NativeValue, SharedExceptionState*);
using PublicDocumentCreateTextNode = WebFValue<Text, TextPublicMethods> (*)(Document*, const char*, SharedExceptionState*);
using PublicDocumentCreateDocumentFragment = WebFValue<DocumentFragment, DocumentFragmentPublicMethods> (*)(Document*, SharedExceptionState*);
using PublicDocumentCreateComment = WebFValue<Comment, CommentPublicMethods> (*)(Document*, const char*, SharedExceptionState*);
using PublicDocumentCreateEvent = WebFValue<Event, EventPublicMethods> (*)(Document*, const char*, SharedExceptionState*);
using PublicDocumentGetElementById = WebFValue<Element, ElementPublicMethods> (*)(Document*, const char*, SharedExceptionState*);
using PublicDocumentGetElementsByClassName = VectorValueRef (*)(Document*, const char*, SharedExceptionState*);
using PublicDocumentGetElementsByTagName = VectorValueRef (*)(Document*, const char*, SharedExceptionState*);
using PublicDocumentGetElementsByName = VectorValueRef (*)(Document*, const char*, SharedExceptionState*);
using PublicDocumentQuerySelector = WebFValue<Element, ElementPublicMethods> (*)(Document*, const char*, SharedExceptionState*);
using PublicDocumentQuerySelectorAll = VectorValueRef (*)(Document*, const char*, SharedExceptionState*);
using PublicDocumentElementFromPoint = WebFValue<Element, ElementPublicMethods> (*)(Document*, double, double, SharedExceptionState*);
struct DocumentPublicMethods : public WebFPublicMethods {
  static AtomicStringRef Title(Document* document, SharedExceptionState* shared_exception_state);
  static void SetTitle(Document* document, const char* title, SharedExceptionState* shared_exception_state);
  static WebFValue<HTMLBodyElement, HTMLBodyElementPublicMethods> Body(Document* document);
  static void SetBody(Document* document, HTMLBodyElement* body, SharedExceptionState* shared_exception_state);
  static AtomicStringRef Cookie(Document* document, SharedExceptionState* shared_exception_state);
  static void SetCookie(Document* document, const char* cookie, SharedExceptionState* shared_exception_state);
  static AtomicStringRef Domain(Document* document);
  static void SetDomain(Document* document, const char* domain, SharedExceptionState* shared_exception_state);
  static WebFValue<HTMLHeadElement, HTMLHeadElementPublicMethods> Head(Document* document);
  static WebFValue<HTMLHtmlElement, HTMLHtmlElementPublicMethods> DocumentElement(Document* document);
  static NativeValue Location(Document* document, SharedExceptionState* shared_exception_state);
  static AtomicStringRef CompatMode(Document* document);
  static AtomicStringRef ReadyState(Document* document);
  static AtomicStringRef VisibilityState(Document* document, SharedExceptionState* shared_exception_state);
  static int32_t Hidden(Document* document);
  static WebFValue<Window, WindowPublicMethods> DefaultView(Document* document);
  static void ClearCookies(Document* document, SharedExceptionState* shared_exception_state);
  static WebFValue<Element, ElementPublicMethods> CreateElement(Document* document, const char* tag_name, NativeValue options, SharedExceptionState* shared_exception_state);
  static WebFValue<Text, TextPublicMethods> CreateTextNode(Document* document, const char* value, SharedExceptionState* shared_exception_state);
  static WebFValue<DocumentFragment, DocumentFragmentPublicMethods> CreateDocumentFragment(Document* document, SharedExceptionState* shared_exception_state);
  static WebFValue<Comment, CommentPublicMethods> CreateComment(Document* document, const char* data, SharedExceptionState* shared_exception_state);
  static WebFValue<Event, EventPublicMethods> CreateEvent(Document* document, const char* event_type, SharedExceptionState* shared_exception_state);
  static WebFValue<Element, ElementPublicMethods> GetElementById(Document* document, const char* id, SharedExceptionState* shared_exception_state);
  static VectorValueRef GetElementsByClassName(Document* document, const char* class_name, SharedExceptionState* shared_exception_state);
  static VectorValueRef GetElementsByTagName(Document* document, const char* tag_name, SharedExceptionState* shared_exception_state);
  static VectorValueRef GetElementsByName(Document* document, const char* name, SharedExceptionState* shared_exception_state);
  static WebFValue<Element, ElementPublicMethods> QuerySelector(Document* document, const char* selectors, SharedExceptionState* shared_exception_state);
  static VectorValueRef QuerySelectorAll(Document* document, const char* selectors, SharedExceptionState* shared_exception_state);
  static WebFValue<Element, ElementPublicMethods> ElementFromPoint(Document* document, double x, double y, SharedExceptionState* shared_exception_state);
  double version{1.0};
  NodePublicMethods node;
  PublicDocumentGetTitle document_get_title{Title};
  PublicDocumentSetTitle document_set_title{SetTitle};
  PublicDocumentGetBody document_get_body{Body};
  PublicDocumentSetBody document_set_body{SetBody};
  PublicDocumentGetCookie document_get_cookie{Cookie};
  PublicDocumentSetCookie document_set_cookie{SetCookie};
  PublicDocumentGetDomain document_get_domain{Domain};
  PublicDocumentSetDomain document_set_domain{SetDomain};
  PublicDocumentGetHead document_get_head{Head};
  PublicDocumentGetDocumentElement document_get_document_element{DocumentElement};
  PublicDocumentGetLocation document_get_location{Location};
  PublicDocumentGetCompatMode document_get_compat_mode{CompatMode};
  PublicDocumentGetReadyState document_get_ready_state{ReadyState};
  PublicDocumentGetVisibilityState document_get_visibility_state{VisibilityState};
  PublicDocumentGetHidden document_get_hidden{Hidden};
  PublicDocumentGetDefaultView document_get_default_view{DefaultView};
  PublicDocumentClearCookies document_clear_cookies{ClearCookies};
  PublicDocumentCreateElement document_create_element{CreateElement};
  PublicDocumentCreateTextNode document_create_text_node{CreateTextNode};
  PublicDocumentCreateDocumentFragment document_create_document_fragment{CreateDocumentFragment};
  PublicDocumentCreateComment document_create_comment{CreateComment};
  PublicDocumentCreateEvent document_create_event{CreateEvent};
  PublicDocumentGetElementById document_get_element_by_id{GetElementById};
  PublicDocumentGetElementsByClassName document_get_elements_by_class_name{GetElementsByClassName};
  PublicDocumentGetElementsByTagName document_get_elements_by_tag_name{GetElementsByTagName};
  PublicDocumentGetElementsByName document_get_elements_by_name{GetElementsByName};
  PublicDocumentQuerySelector document_query_selector{QuerySelector};
  PublicDocumentQuerySelectorAll document_query_selector_all{QuerySelectorAll};
  PublicDocumentElementFromPoint document_element_from_point{ElementFromPoint};
};
}  // namespace webf
#endif  // WEBF_CORE_WEBF_API_PLUGIN_API_DOCUMENT_H_
